services:
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine

  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
      - PLAYWRIGHT_BROWSERS_PATH=/app/.cache/ms-playwright
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: sh -c "chmod +x /app/entrypoint.sh && /app/entrypoint.sh"

  worker:
    build:
      context: .
      dockerfile: worker.Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - redis
      - db

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://backend:8000
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - backend

volumes:
  postgres_data: